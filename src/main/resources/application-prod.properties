# ============================================================
# CONFIGURACIÓN DE PRODUCCIÓN PARA RAILWAY
# Este archivo se activa cuando SPRING_PROFILES_ACTIVE=prod
# ============================================================

# Puerto dinámico: Railway asigna un puerto automáticamente
# La variable ${PORT} viene de Railway, si no existe usa 8080
server.port=${PORT:8080}

# URL de conexión a MySQL: Railway crea esta variable automáticamente
# Formato: mysql://usuario:password@host:puerto/database
spring.datasource.url=${DATABASE_URL}

# Driver específico para MySQL 8.0+ (Railway usa MySQL 8)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate: 'update' crea/actualiza tablas automáticamente sin perder datos
# En producción real usar 'validate' + Flyway, pero para empezar 'update' está bien
spring.jpa.hibernate.ddl-auto=update

# No mostrar SQL en logs de producción (por seguridad y performance)
spring.jpa.show-sql=false

# Dialecto específico para MySQL 8 (optimizaciones automáticas)
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# ============================================================
# CONFIGURACIÓN VAADIN PARA PRODUCCIÓN
# ============================================================

# Activar modo producción: comprime JavaScript, CSS y optimiza rendering
vaadin.productionMode=true

# Desactivar pnpm: Railway usa npm por defecto, evita conflictos
vaadin.pnpm.enable=false

# ============================================================
# LOGGING OPTIMIZADO PARA PRODUCCIÓN
# ============================================================

# Nivel general: solo WARNING y ERROR (menos ruido en logs)
logging.level.root=WARN

# Tu aplicación específica: INFO para debugging básico
logging.level.com.ElihuAnalytics.ConsultorioAcupuntura=INFO

# Formato de logs más limpio para producción
logging.pattern.console=%d{HH:mm:ss} %-5level %logger{36} - %msg%n

# ============================================================
# POOL DE CONEXIONES OPTIMIZADO PARA CONSULTORIO
# ============================================================

# Máximo 10 conexiones simultáneas (suficiente para 100+ usuarios concurrentes)
spring.datasource.hikari.maximum-pool-size=10

# Mínimo 2 conexiones siempre activas (respuesta más rápida)
spring.datasource.hikari.minimum-idle=2
# Timeout de conexión: 30 segundos máximo
spring.datasource.hikari.connection-timeout=30000

# ============================================================
# OPTIMIZACIONES DE SERVIDOR
# ============================================================

# Comprimir respuestas HTTP: páginas más rápidas
server.compression.enabled=true

# Tipos de archivos a comprimir
server.compression.mime-types=text/html,text/css,application/javascript,application/json